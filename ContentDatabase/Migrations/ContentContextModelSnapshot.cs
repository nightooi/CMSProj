// <auto-generated />
using System;
using ContentDatabase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ContentDatabase.Migrations
{
    [DbContext(typeof(ContentContext))]
    partial class ContentContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ContentDatabase.Model.AssetFileType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("FileType")
                        .IsUnique();

                    b.ToTable("AssetFileTypes");
                });

            modelBuilder.Entity("ContentDatabase.Model.AssetHostDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DomainName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DomainUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AssetHostDomains");
                });

            modelBuilder.Entity("ContentDatabase.Model.Assets", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssetDomainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssetFileTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AssetFileTypeId1")
                        .HasColumnType("int");

                    b.Property<string>("AssetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Constructed")
                        .HasColumnType("datetime2");

                    b.Property<string>("CopyRight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CopyRightDisclaimer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Generated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastRevisionTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Published")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RevisionAuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RevisionDiff")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("AssetDomainId");

                    b.HasIndex("AssetFileTypeId1");

                    b.HasIndex("AuthorId");

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("ContentDatabase.Model.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("ContentDatabase.Model.AuthoredComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ComponentName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("Constructed")
                        .HasColumnType("datetime2");

                    b.Property<string>("CopyRight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CopyRightDisclaimer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CssUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Generated")
                        .HasColumnType("datetime2");

                    b.Property<string>("HeaderJsUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JsUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastRevisionTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PageComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PageVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PayLoad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Published")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RevisionAuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RevisionDiff")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.Property<Guid>("VersionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PageComponentId");

                    b.HasIndex("PageVersionId");

                    b.ToTable("AuothoredComponents");
                });

            modelBuilder.Entity("ContentDatabase.Model.Page", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Constructed")
                        .HasColumnType("datetime2");

                    b.Property<string>("CopyRight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CopyRightDisclaimer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Generated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastRevisionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("PageTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Published")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RevisionAuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RevisionDiff")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PageTemplateId");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("ContentDatabase.Model.PageComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ComponentPosition")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("Constructed")
                        .HasColumnType("datetime2");

                    b.Property<string>("CopyRight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CopyRightDisclaimer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Generated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastRevisionTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Published")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RevisionAuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RevisionDiff")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("PageComponent");
                });

            modelBuilder.Entity("ContentDatabase.Model.PageTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Constructed")
                        .HasColumnType("datetime2");

                    b.Property<string>("CopyRight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CopyRightDisclaimer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Generated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastRevisionTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Published")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RevisionAuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RevisionDiff")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("PageTemplates");
                });

            modelBuilder.Entity("ContentDatabase.Model.PageVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Constructed")
                        .HasColumnType("datetime2");

                    b.Property<string>("CopyRight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CopyRightDisclaimer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Generated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastRevisionTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Published")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RevisionAuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RevisionDiff")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VersionNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PageId");

                    b.ToTable("PageVersions");
                });

            modelBuilder.Entity("PageComponentPageTemplate", b =>
                {
                    b.Property<Guid>("PageComponentsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PageTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PageComponentsId", "PageTemplateId");

                    b.HasIndex("PageTemplateId");

                    b.ToTable("PageComponentPageTemplate");
                });

            modelBuilder.Entity("ContentDatabase.Model.Assets", b =>
                {
                    b.HasOne("ContentDatabase.Model.AssetHostDomain", "AssetDomain")
                        .WithMany("Assets")
                        .HasForeignKey("AssetDomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContentDatabase.Model.AssetFileType", "AssetFileType")
                        .WithMany("Assets")
                        .HasForeignKey("AssetFileTypeId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContentDatabase.Model.Author", "CreationAuthor")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("AssetDomain");

                    b.Navigation("AssetFileType");

                    b.Navigation("CreationAuthor");
                });

            modelBuilder.Entity("ContentDatabase.Model.AuthoredComponent", b =>
                {
                    b.HasOne("ContentDatabase.Model.Author", "CreationAuthor")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("ContentDatabase.Model.PageComponent", "PageComponent")
                        .WithMany("AuthoredComponent")
                        .HasForeignKey("PageComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContentDatabase.Model.PageVersion", "PageVersion")
                        .WithMany("Components")
                        .HasForeignKey("PageVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreationAuthor");

                    b.Navigation("PageComponent");

                    b.Navigation("PageVersion");
                });

            modelBuilder.Entity("ContentDatabase.Model.Page", b =>
                {
                    b.HasOne("ContentDatabase.Model.Author", "CreationAuthor")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("ContentDatabase.Model.PageTemplate", "PageTemplate")
                        .WithMany("Pages")
                        .HasForeignKey("PageTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreationAuthor");

                    b.Navigation("PageTemplate");
                });

            modelBuilder.Entity("ContentDatabase.Model.PageComponent", b =>
                {
                    b.HasOne("ContentDatabase.Model.Author", "CreationAuthor")
                        .WithMany("PageComponents")
                        .HasForeignKey("AuthorId");

                    b.Navigation("CreationAuthor");
                });

            modelBuilder.Entity("ContentDatabase.Model.PageTemplate", b =>
                {
                    b.HasOne("ContentDatabase.Model.Author", "CreationAuthor")
                        .WithMany("PageTemplates")
                        .HasForeignKey("AuthorId");

                    b.Navigation("CreationAuthor");
                });

            modelBuilder.Entity("ContentDatabase.Model.PageVersion", b =>
                {
                    b.HasOne("ContentDatabase.Model.Author", "CreationAuthor")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("ContentDatabase.Model.Page", "Page")
                        .WithMany("PageComponenets")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreationAuthor");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("PageComponentPageTemplate", b =>
                {
                    b.HasOne("ContentDatabase.Model.PageComponent", null)
                        .WithMany()
                        .HasForeignKey("PageComponentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContentDatabase.Model.PageTemplate", null)
                        .WithMany()
                        .HasForeignKey("PageTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContentDatabase.Model.AssetFileType", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("ContentDatabase.Model.AssetHostDomain", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("ContentDatabase.Model.Author", b =>
                {
                    b.Navigation("PageComponents");

                    b.Navigation("PageTemplates");
                });

            modelBuilder.Entity("ContentDatabase.Model.Page", b =>
                {
                    b.Navigation("PageComponenets");
                });

            modelBuilder.Entity("ContentDatabase.Model.PageComponent", b =>
                {
                    b.Navigation("AuthoredComponent");
                });

            modelBuilder.Entity("ContentDatabase.Model.PageTemplate", b =>
                {
                    b.Navigation("Pages");
                });

            modelBuilder.Entity("ContentDatabase.Model.PageVersion", b =>
                {
                    b.Navigation("Components");
                });
#pragma warning restore 612, 618
        }
    }
}
