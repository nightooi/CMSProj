// <auto-generated />
using System;
using ContentDatabase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ContentDatabase.Migrations
{
    [DbContext(typeof(ContentContext))]
    [Migration("20251001092100_AddingCounterAdj")]
    partial class AddingCounterAdj
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ContentDatabase.Model.AssetFileType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("FileType")
                        .IsUnique();

                    b.ToTable("AssetFileTypes");
                });

            modelBuilder.Entity("ContentDatabase.Model.AssetHostDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DomainName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DomainUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AssetHostDomains");
                });

            modelBuilder.Entity("ContentDatabase.Model.AssetPageComponent", b =>
                {
                    b.Property<Guid>("AssetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AssetId", "ComponentId");

                    b.HasIndex("ComponentId");

                    b.ToTable("AssetComponentJoinTable");
                });

            modelBuilder.Entity("ContentDatabase.Model.Assets", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssetDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AssetDomainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssetFileTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Constructed")
                        .HasColumnType("datetime2");

                    b.Property<string>("CopyRight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CopyRightDisclaimer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreationAuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Generated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastRevisionTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Published")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevisionDiff")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("AssetDomainId");

                    b.HasIndex("AssetFileTypeId");

                    b.HasIndex("CreationAuthorId");

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("ContentDatabase.Model.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("ContentDatabase.Model.AuthoredAssetJoin", b =>
                {
                    b.Property<Guid>("AssetsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Asset")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthoredComp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompAssetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AssetsId", "PageId");

                    b.HasAlternateKey("Asset");

                    b.HasIndex("CompAssetId");

                    b.HasIndex("CompId");

                    b.HasIndex("PageId");

                    b.ToTable("AssetAuthoredJoinTable");
                });

            modelBuilder.Entity("ContentDatabase.Model.AuthoredComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ComponentName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("Constructed")
                        .HasColumnType("datetime2");

                    b.Property<string>("CopyRight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CopyRightDisclaimer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreationAuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CssHeaderTags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Generated")
                        .HasColumnType("datetime2");

                    b.Property<string>("JsBodyTags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JsHeaderTags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastRevisionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OtherHeaders")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PageComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PageVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PayLoadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Published")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevisionDiff")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreationAuthorId");

                    b.HasIndex("PageComponentId");

                    b.HasIndex("PageVersionId");

                    b.HasIndex("PayLoadId");

                    b.ToTable("AuthoredComponents");
                });

            modelBuilder.Entity("ContentDatabase.Model.ComponentMarkup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Constructed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CopyRight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CopyRightDisclaimer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreationAuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Generated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastRevisionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Markup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Published")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevisionDiff")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreationAuthorId");

                    b.ToTable("ComponentMarkups");
                });

            modelBuilder.Entity("ContentDatabase.Model.Counter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Page")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Page")
                        .IsUnique();

                    b.ToTable("Counters");
                });

            modelBuilder.Entity("ContentDatabase.Model.CounterUpdate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CounterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LogMessage")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CounterId");

                    b.ToTable("CounterUpdates");
                });

            modelBuilder.Entity("ContentDatabase.Model.Page", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Constructed")
                        .HasColumnType("datetime2");

                    b.Property<string>("CopyRight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CopyRightDisclaimer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreationAuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Generated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastRevisionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("Published")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevisionDiff")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SlugId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreationAuthorId");

                    b.HasIndex("SlugId");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("ContentDatabase.Model.PageComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ChildOffset")
                        .HasColumnType("int");

                    b.Property<string>("ComponentHtml")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<DateTime>("Constructed")
                        .HasColumnType("datetime2");

                    b.Property<string>("CopyRight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CopyRightDisclaimer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreationAuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CssHeaderTags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Generated")
                        .HasColumnType("datetime2");

                    b.Property<string>("JsBodyTags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JsHeaderTags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastRevisionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OtherHeaders")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PageTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Published")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevisionDiff")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SelfPageOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreationAuthorId");

                    b.HasIndex("PageTemplateId");

                    b.ToTable("PageComponents");
                });

            modelBuilder.Entity("ContentDatabase.Model.PageSlug", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PageslugSlugId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("PageslugSlugId");

                    b.ToTable("PageSlugs");
                });

            modelBuilder.Entity("ContentDatabase.Model.PageTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Constructed")
                        .HasColumnType("datetime2");

                    b.Property<string>("CopyRight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CopyRightDisclaimer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreationAuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Generated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastRevisionTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Published")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevisionDiff")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreationAuthorId");

                    b.ToTable("PageTemplates");
                });

            modelBuilder.Entity("ContentDatabase.Model.PageVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Constructed")
                        .HasColumnType("datetime2");

                    b.Property<string>("CopyRight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CopyRightDisclaimer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreationAuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Generated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastRevisionTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PageTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Published")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevisionDiff")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreationAuthorId");

                    b.HasIndex("PageId");

                    b.HasIndex("PageTemplateId");

                    b.ToTable("PageVersions");
                });

            modelBuilder.Entity("ContentDatabase.Model.PublishedPageSlug", b =>
                {
                    b.Property<Guid>("SlugId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PageVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("SlugId");

                    b.HasIndex("PageId")
                        .IsUnique();

                    b.HasIndex("PageVersionId")
                        .IsUnique();

                    b.ToTable("PublishedPages");
                });

            modelBuilder.Entity("ContentDatabase.Model.AssetPageComponent", b =>
                {
                    b.HasOne("ContentDatabase.Model.Assets", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ContentDatabase.Model.PageComponent", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Asset");

                    b.Navigation("Component");
                });

            modelBuilder.Entity("ContentDatabase.Model.Assets", b =>
                {
                    b.HasOne("ContentDatabase.Model.AssetHostDomain", "AssetDomain")
                        .WithMany("Assets")
                        .HasForeignKey("AssetDomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContentDatabase.Model.AssetFileType", "AssetFileType")
                        .WithMany("Assets")
                        .HasForeignKey("AssetFileTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContentDatabase.Model.Author", "CreationAuthor")
                        .WithMany()
                        .HasForeignKey("CreationAuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssetDomain");

                    b.Navigation("AssetFileType");

                    b.Navigation("CreationAuthor");
                });

            modelBuilder.Entity("ContentDatabase.Model.AuthoredAssetJoin", b =>
                {
                    b.HasOne("ContentDatabase.Model.Assets", null)
                        .WithMany()
                        .HasForeignKey("AssetsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ContentDatabase.Model.Assets", "CompAsset")
                        .WithMany()
                        .HasForeignKey("CompAssetId");

                    b.HasOne("ContentDatabase.Model.AuthoredComponent", "Comp")
                        .WithMany()
                        .HasForeignKey("CompId");

                    b.HasOne("ContentDatabase.Model.AuthoredComponent", null)
                        .WithMany()
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Comp");

                    b.Navigation("CompAsset");
                });

            modelBuilder.Entity("ContentDatabase.Model.AuthoredComponent", b =>
                {
                    b.HasOne("ContentDatabase.Model.Author", "CreationAuthor")
                        .WithMany()
                        .HasForeignKey("CreationAuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContentDatabase.Model.PageComponent", "PageComponent")
                        .WithMany("AuthoredComponent")
                        .HasForeignKey("PageComponentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ContentDatabase.Model.PageVersion", "PageVersion")
                        .WithMany("Components")
                        .HasForeignKey("PageVersionId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("ContentDatabase.Model.ComponentMarkup", "PayLoad")
                        .WithMany("Pages")
                        .HasForeignKey("PayLoadId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreationAuthor");

                    b.Navigation("PageComponent");

                    b.Navigation("PageVersion");

                    b.Navigation("PayLoad");
                });

            modelBuilder.Entity("ContentDatabase.Model.ComponentMarkup", b =>
                {
                    b.HasOne("ContentDatabase.Model.Author", "CreationAuthor")
                        .WithMany()
                        .HasForeignKey("CreationAuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreationAuthor");
                });

            modelBuilder.Entity("ContentDatabase.Model.CounterUpdate", b =>
                {
                    b.HasOne("ContentDatabase.Model.Counter", "Counter")
                        .WithMany("UpdateLog")
                        .HasForeignKey("CounterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Counter");
                });

            modelBuilder.Entity("ContentDatabase.Model.Page", b =>
                {
                    b.HasOne("ContentDatabase.Model.Author", "CreationAuthor")
                        .WithMany()
                        .HasForeignKey("CreationAuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContentDatabase.Model.PageSlug", "Slug")
                        .WithMany("Pages")
                        .HasForeignKey("SlugId");

                    b.Navigation("CreationAuthor");

                    b.Navigation("Slug");
                });

            modelBuilder.Entity("ContentDatabase.Model.PageComponent", b =>
                {
                    b.HasOne("ContentDatabase.Model.Author", "CreationAuthor")
                        .WithMany("PageComponents")
                        .HasForeignKey("CreationAuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContentDatabase.Model.PageTemplate", "PageTemplate")
                        .WithMany("PageComponents")
                        .HasForeignKey("PageTemplateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreationAuthor");

                    b.Navigation("PageTemplate");
                });

            modelBuilder.Entity("ContentDatabase.Model.PageSlug", b =>
                {
                    b.HasOne("ContentDatabase.Model.PublishedPageSlug", "Pageslug")
                        .WithMany()
                        .HasForeignKey("PageslugSlugId");

                    b.Navigation("Pageslug");
                });

            modelBuilder.Entity("ContentDatabase.Model.PageTemplate", b =>
                {
                    b.HasOne("ContentDatabase.Model.Author", "CreationAuthor")
                        .WithMany("PageTemplates")
                        .HasForeignKey("CreationAuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreationAuthor");
                });

            modelBuilder.Entity("ContentDatabase.Model.PageVersion", b =>
                {
                    b.HasOne("ContentDatabase.Model.Author", "CreationAuthor")
                        .WithMany()
                        .HasForeignKey("CreationAuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContentDatabase.Model.Page", "Page")
                        .WithMany("PageVersions")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ContentDatabase.Model.PageTemplate", "PageTemplate")
                        .WithMany("PageVersions")
                        .HasForeignKey("PageTemplateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreationAuthor");

                    b.Navigation("Page");

                    b.Navigation("PageTemplate");
                });

            modelBuilder.Entity("ContentDatabase.Model.PublishedPageSlug", b =>
                {
                    b.HasOne("ContentDatabase.Model.Page", "Page")
                        .WithOne()
                        .HasForeignKey("ContentDatabase.Model.PublishedPageSlug", "PageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ContentDatabase.Model.PageVersion", "PageVersion")
                        .WithOne()
                        .HasForeignKey("ContentDatabase.Model.PublishedPageSlug", "PageVersionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ContentDatabase.Model.PageSlug", "Slug")
                        .WithOne()
                        .HasForeignKey("ContentDatabase.Model.PublishedPageSlug", "SlugId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Page");

                    b.Navigation("PageVersion");

                    b.Navigation("Slug");
                });

            modelBuilder.Entity("ContentDatabase.Model.AssetFileType", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("ContentDatabase.Model.AssetHostDomain", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("ContentDatabase.Model.Author", b =>
                {
                    b.Navigation("PageComponents");

                    b.Navigation("PageTemplates");
                });

            modelBuilder.Entity("ContentDatabase.Model.ComponentMarkup", b =>
                {
                    b.Navigation("Pages");
                });

            modelBuilder.Entity("ContentDatabase.Model.Counter", b =>
                {
                    b.Navigation("UpdateLog");
                });

            modelBuilder.Entity("ContentDatabase.Model.Page", b =>
                {
                    b.Navigation("PageVersions");
                });

            modelBuilder.Entity("ContentDatabase.Model.PageComponent", b =>
                {
                    b.Navigation("AuthoredComponent");
                });

            modelBuilder.Entity("ContentDatabase.Model.PageSlug", b =>
                {
                    b.Navigation("Pages");
                });

            modelBuilder.Entity("ContentDatabase.Model.PageTemplate", b =>
                {
                    b.Navigation("PageComponents");

                    b.Navigation("PageVersions");
                });

            modelBuilder.Entity("ContentDatabase.Model.PageVersion", b =>
                {
                    b.Navigation("Components");
                });
#pragma warning restore 612, 618
        }
    }
}
